diff --git a/node_modules/next/dist/esm/server/lib/incremental-cache/index.js b/node_modules/next/dist/esm/server/lib/incremental-cache/index.js
index cc7a320..49d35d4 100644
--- a/node_modules/next/dist/esm/server/lib/incremental-cache/index.js
+++ b/node_modules/next/dist/esm/server/lib/incremental-cache/index.js
@@ -353,11 +353,13 @@ export class IncrementalCache {
         }
         if (this.dev && !ctx.fetchCache) return;
         // FetchCache has upper limit of 2MB per-entry currently
+        const max_fetch_size = Number(process.env.MAX_FETCH_SIZE) || 2;
+        const data_length = JSON.stringify(data).length / 1024 / 1024;
         if (ctx.fetchCache && // we don't show this error/warning when a custom cache handler is being used
         // as it might not have this limit
-        !this.hasCustomCacheHandler && JSON.stringify(data).length > 2 * 1024 * 1024) {
+        !this.hasCustomCacheHandler && data_length > max_fetch_size) {
             if (this.dev) {
-                throw new Error(`fetch for over 2MB of data can not be cached`);
+                throw new Error(`fetch for over ${max_fetch_size}MB of data can not be cached. This Data: ${data_length}MB`);
             }
             return;
         }
diff --git a/node_modules/next/dist/server/lib/incremental-cache/index.js b/node_modules/next/dist/server/lib/incremental-cache/index.js
index be894e9..2f30424 100644
--- a/node_modules/next/dist/server/lib/incremental-cache/index.js
+++ b/node_modules/next/dist/server/lib/incremental-cache/index.js
@@ -380,11 +380,13 @@ class IncrementalCache {
         }
         if (this.dev && !ctx.fetchCache) return;
         // FetchCache has upper limit of 2MB per-entry currently
+        const max_fetch_size = Number(process.env.MAX_FETCH_SIZE) || 2;
+        const data_length = JSON.stringify(data).length / 1024 / 1024;
         if (ctx.fetchCache && // we don't show this error/warning when a custom cache handler is being used
         // as it might not have this limit
-        !this.hasCustomCacheHandler && JSON.stringify(data).length > 2 * 1024 * 1024) {
+        !this.hasCustomCacheHandler && data_length > 2 * 1024 * 1024) {
             if (this.dev) {
-                throw new Error(`fetch for over 2MB of data can not be cached`);
+              throw new Error(`fetch for over ${max_fetch_size}MB of data can not be cached. This Data: ${data_length}MB`);
             }
             return;
         }
